scale_fill_jco()+
theme(legend.position = "none")
dataset |>
ggplot(aes(x= as.factor(cluster),y=Income)) +
geom_violin(aes(fill=cluster)) +
geom_jitter(height = 0, width = 0.1,aes(Education))
dataset |>
ggplot(aes(x= as.factor(cluster),y=Income)) +
geom_violin(aes(fill=as.factor(cluster))) +
geom_jitter(height = 0, width = 0.1,aes(Education))
dataset |>
ggplot(aes(x= as.factor(cluster),y=Income)) +
geom_violin(aes(fill=as.factor(cluster))) +
geom_jitter(height = 0, width = 0.1,aes(color=Education))
dataset |>
ggplot(aes(x= as.factor(cluster),y=Income)) +
geom_violin(aes(fill=as.factor(cluster))) +
geom_point(height = 0, width = 0.1,aes(color=Education))
dataset |>
ggplot(aes(x= as.factor(cluster),y=Income)) +
geom_violin(aes(fill=as.factor(cluster))) +
geom_point(aes(color=Education))
dataset |>
ggplot(aes(x= as.factor(cluster),y=Income)) +
geom_violin(aes(fill=as.factor(cluster))) +
geom_point(aes(color=Education), position = 'jitter')
dataset |>
ggplot(aes(x= as.factor(cluster),y=Income)) +
geom_violin(aes(fill=as.factor(cluster))) +
geom_point(aes(color=Education), position = 'jitter') +
scale_fill_jco()
dataset |>
ggplot(aes(x= as.factor(cluster),y=Income)) +
geom_violin(aes(fill=as.factor(cluster))) +
geom_point(aes(color=Education), position = 'jitter') +
scale_color_jco()
dataset |>
ggplot(aes(x= as.factor(cluster),y=Income)) +
geom_violin(aes(fill=as.factor(cluster))) +
geom_point(aes(color=Education), position = 'jitter', alpha=0.5) +
scale_color_jco()
dataset |>
ggplot(aes(x = as.factor(cluster), y = Income, fill = as.factor(cluster))) +
geom_violin() +
labs(x = "Grupos",
y = "",
title = "Renda por Grupo",
subtitle = "Variação quase imperceptivel") +
scale_fill_jco()+
theme(legend.position = "none") +
scale_y_continuous(limits = quantile(dataset$Income,c(0.1, 0.9)))
dataset |>
ggplot(aes(x = as.factor(cluster), y = Income, fill = as.factor(cluster))) +
geom_violin() +
labs(x = "Grupos",
y = "",
title = "Renda por Grupo",
subtitle = "Variação quase imperceptivel") +
scale_fill_jco()+
theme(legend.position = "none")
scale_y_continuous(limits = quantile(dataset$Income,c(0.1, 0.9)))
dataset |>
ggplot(aes(x = as.factor(cluster), y = Income, fill = as.factor(cluster))) +
geom_violin() +
labs(x = "Grupos",
y = "",
title = "Renda por Grupo",
subtitle = "Variação quase imperceptivel") +
scale_fill_jco()+
theme(legend.position = "none") +
scale_y_continuous(limits = quantile(dataset$Income,c(0.1, 0.9)))
dataset |>
ggplot(aes(x = as.factor(cluster), y = Income, fill = as.factor(cluster))) +
geom_violin() +
labs(x = "Grupos",
y = "",
title = "Renda por Grupo",
subtitle = "Variação quase imperceptivel") +
scale_fill_jco()+
theme(legend.position = "none") +
scale_y_continuous(limits = quantile(dataset$Income,c(0.1, 1)))
dataset |>
ggplot(aes(x = as.factor(cluster), y = Income, fill = as.factor(cluster))) +
geom_violin() +
labs(x = "Grupos",
y = "",
title = "Renda por Grupo",
subtitle = "Variação quase imperceptivel") +
scale_fill_jco()+
theme(legend.position = "none") +
scale_y_continuous(limits = quantile(dataset$Income,c(0.1, 0.9)))
dataset |>
ggplot(aes(x = as.factor(cluster), y = Income, fill = as.factor(cluster))) +
geom_violin() +
labs(x = "Grupos",
y = "Renda Anual",
title = "Renda por Grupo",
subtitle = "Variação quase imperceptivel") +
scale_fill_jco()+
theme(legend.position = "none") +
scale_y_continuous(limits = quantile(dataset$Income,c(0.1, 0.9)))
dataset |>
ggplot(aes(x=Education,y=Income)) +
geom_col() +
scale_color_jco()
dataset |>
ggplot(aes(x=Education,y=Income)) +
geom_col(aes(fill=as.factor(cluster))) +
scale_color_jco()
dataset |>
ggplot(aes(x=Education,y=Income)) +
geom_col(aes(fill=as.factor(cluster)),position = 'dodge') +
scale_color_jco()
dataset |>
ggplot(aes(x=Education,y=Income)) +
geom_col(aes(fill=as.factor(cluster)),position = 'dodge') +
scale_fill_jco()
dataset |>
ggplot(aes(x=Education,y=Income)) +
geom_col(aes(fill=as.factor(cluster)),position = 'dodge') +
scale_fill_jco() +
labs(x = "Educação",
y = "Renda",
title = "Renda por Grupo")
dataset |>
ggplot(aes(x=Education,y=Income)) +
geom_col(aes(fill=as.factor(cluster)),position = 'dodge') +
scale_fill_jco() +
labs(x = "Educação",
y = "Renda",
title = "Renda por Grupo") +
guide_legend("Grupos")
dataset |>
ggplot(aes(x=Education,y=Income)) +
geom_col(aes(fill=as.factor(cluster)),position = 'dodge') +
scale_fill_jco() +
labs(x = "Educação",
y = "Renda",
title = "Renda por Grupo") +
guide("Grupos")
dataset |>
ggplot(aes(x=Education,y=Income)) +
geom_col(aes(fill=as.factor(cluster)),position = 'dodge') +
scale_fill_jco() +
labs(x = "Educação",
y = "Renda",
title = "Renda por Grupo") +
guides("Grupos")
dataset |>
ggplot(aes(x=Education,y=Income)) +
geom_col(aes(fill=as.factor(cluster)),position = 'dodge') +
scale_fill_jco() +
labs(x = "Educação",
y = "Renda",
title= "Renda por Grupo",
fill="Grupo")
dataset |> group_by(cluster,Education,Income) |>
summarise(soma=sum(Income)) |>
ggplot(aes(x=Education,y=soma)) +
geom_col(aes(fill=as.factor(cluster)),position = 'dodge') +
scale_fill_jco() +
labs(x = "Educação",
y = "Renda",
title= "Renda por Grupo",
fill="Grupo")
dataset |>
ggplot(aes(x=Education,y=Income)) +
geom_col(aes(fill=as.factor(cluster)),position = 'dodge') +
scale_fill_jco() +
labs(x = "Education",
y = "Income by year",
title= "Income by Group",
fill="Group")
dataset |>
ggplot(aes(x = as.factor(cluster), y = Income, fill = as.factor(cluster))) +
geom_violin() +
labs(x = "Group",
y = "Annual Income",
title = "Income by Group"
) +
scale_fill_jco()+
theme(legend.position = "none") +
scale_y_continuous(limits = quantile(dataset$Income,c(0.1, 0.9)))
dataset |>
ggplot() +
geom_boxplot(aes(x = as.factor(cluster), y = Income, fill = as.factor(cluster))) +
labs(x = "Groups",
y = "",
title = "Income by Group",
) +
scale_fill_jco()+
theme(legend.position = "none")
dataset |>
ggplot(aes(x = as.factor(cluster), y = Income, fill = as.factor(cluster))) +
geom_violin() +
labs(x = "Group",
y = "Annual Income",
title = "Income by Group with between 10%-90% of customers"
) +
scale_fill_jco()+
theme(legend.position = "none") +
scale_y_continuous(limits = quantile(dataset$Income,c(0.1, 0.9)))
dataset |>
ggplot(aes(x = as.factor(cluster), y = Income, fill = as.factor(cluster))) +
geom_violin() +
labs(x = "Group",
y = "Annual Income",
title = "Income by Group",
subtitle= "Between 10%-90% of customers"
) +
scale_fill_jco()+
theme(legend.position = "none") +
scale_y_continuous(limits = quantile(dataset$Income,c(0.1, 0.9)))
dataset |>
ggplot() +
geom_boxplot(aes(x = as.factor(cluster), y = Income, fill = as.factor(cluster))) +
labs(x = "Groups",
y = "",
title = "Income by Group",
subtitle = "All custumers"
) +
scale_fill_jco()+
theme(legend.position = "none")
hipotese = function(column){
byf.shapiro(column ~ cluster,dataset)
kruskal.test(column ~ cluster, data = dataset)
wilcox.test(column ~ cluster, data = dataset)
dunn_test(column ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese(dataset$MntWines)
hipotese(MntWines)
hipotese = function(columns){
column =dataset[columns]
byf.shapiro(column ~ cluster,dataset)
kruskal.test(column ~ cluster, data = dataset)
wilcox.test(column ~ cluster, data = dataset)
dunn_test(column ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese(MntWines)
hipotese('MntWines')
dataset['MntWines']
byf.shapiro(dataset[Income] ~ dataset[cluster]) #Os dados não são normais
byf.shapiro(dataset['Income'] ~ dataset['cluster']) #Os dados não são normais
byf.shapiro(dataset[['Income']] ~ dataset[['cluster']]) #Os dados não são normais
hipotese = function(columns){
column =dataset[[columns]]
byf.shapiro(column ~ cluster,dataset)
kruskal.test(column ~ cluster, data = dataset)
wilcox.test(column ~ cluster, data = dataset)
dunn_test(column ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
dataset[['MntWines']]
teste=dataset[['MntWines']]
teste
hipotese = function(columns){
byf.shapiro(dataset[[columns]]~ cluster,dataset)
kruskal.test(dataset[[columns]] ~ cluster, data = dataset)
wilcox.test(dataset[[columns]] ~ cluster, data = dataset)
dunn_test(dataset[[columns]] ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
modelo = readRDS(here('objects/clara_cluster.R'))
hipotese = function(columns){
print(i)
#byf.shapiro(dataset[[columns]]~ cluster,dataset)
#kruskal.test(dataset[[columns]] ~ cluster, data = dataset)
#wilcox.test(dataset[[columns]] ~ cluster, data = dataset)
#dunn_test(dataset[[columns]] ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
hipotese = function(columns){
print(columns)
#byf.shapiro(dataset[[columns]]~ cluster,dataset)
#kruskal.test(dataset[[columns]] ~ cluster, data = dataset)
#wilcox.test(dataset[[columns]] ~ cluster, data = dataset)
#dunn_test(dataset[[columns]] ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
hipotese = function(columns){
print(dataset[columns])
#byf.shapiro(dataset[[columns]]~ cluster,dataset)
#kruskal.test(dataset[[columns]] ~ cluster, data = dataset)
#wilcox.test(dataset[[columns]] ~ cluster, data = dataset)
#dunn_test(dataset[[columns]] ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
byf.shapiro(dataset[['MntWines']]~ cluster,dataset)
hipotese = function(columns){
print(dataset[columns])
byf.shapiro(dataset[[columns]]~ cluster,dataset)
kruskal.test(dataset[[columns]] ~ cluster, data = dataset)
wilcox.test(dataset[[columns]] ~ cluster, data = dataset)
dunn_test(dataset[[columns]] ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
byf.shapiro(teste~ cluster,dataset)
p='MntWines'
teste=dataset[[p]]
byf.shapiro(teste~ cluster,dataset)
hipotese = function(column){
columns = column
byf.shapiro(dataset[[columns]]~ cluster,dataset)
kruskal.test(dataset[[columns]] ~ cluster, data = dataset)
wilcox.test(dataset[[columns]] ~ cluster, data = dataset)
dunn_test(dataset[[columns]] ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
hipotese = function(column){
x = column
byf.shapiro(dataset[[x]]~ cluster,dataset)
kruskal.test(dataset[[x]] ~ cluster, data = dataset)
wilcox.test(dataset[[x]] ~ cluster, data = dataset)
dunn_test(dataset[[x]] ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
hipotese = function(column){
x = column
print(x)
byf.shapiro(dataset[[x]]~ cluster,dataset)
kruskal.test(dataset[[x]] ~ cluster, data = dataset)
wilcox.test(dataset[[x]] ~ cluster, data = dataset)
dunn_test(dataset[[x]] ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
hipotese = function(column){
x = column
print(x)
byf.shapiro(dataset[[paste(x)]]~ cluster,dataset)
kruskal.test(dataset[[paste(x)]] ~ cluster, data = dataset)
wilcox.test(dataset[[paste(x)]] ~ cluster, data = dataset)
dunn_test(dataset[[paste(x)]] ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
hipotese = function(column){
dataset[[column]]
print(x)
byf.shapiro(dataset[[paste(x)]]~ cluster,dataset)
kruskal.test(dataset[[paste(x)]] ~ cluster, data = dataset)
wilcox.test(dataset[[paste(x)]] ~ cluster, data = dataset)
dunn_test(dataset[[paste(x)]] ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
hipotese = function(column){
dataset[[column]]
byf.shapiro(dataset[[paste(x)]]~ cluster,dataset)
kruskal.test(dataset[[paste(x)]] ~ cluster, data = dataset)
wilcox.test(dataset[[paste(x)]] ~ cluster, data = dataset)
dunn_test(dataset[[paste(x)]] ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
source("D:/Romario/Programar/Ferramentas/R/Projetos/Datasets/Kaggle_Companys Ideal Customers  Marketing Strategy/script/graficos.R", echo=TRUE)
hipotese = function(column){
x=dataset[[column]]
byf.shapiro(x~ cluster,dataset)
kruskal.test(x ~ cluster, data = dataset)
wilcox.test(x ~ cluster, data = dataset)
dunn_test(x ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
hipotese = function(column){
x=select(dataset,column)
byf.shapiro(x~ cluster,dataset)
kruskal.test(x ~ cluster, data = dataset)
wilcox.test(x ~ cluster, data = dataset)
dunn_test(x ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
hipotese = function(column){
x=select(dataset,all_of(column))
byf.shapiro(x~ cluster,dataset)
kruskal.test(x ~ cluster, data = dataset)
wilcox.test(x ~ cluster, data = dataset)
dunn_test(x ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese('MntWines')
hipotese(MntWines)
hipotese = function(column){
x=select(dataset,column)
byf.shapiro(x~ cluster,dataset)
kruskal.test(x ~ cluster, data = dataset)
wilcox.test(x ~ cluster, data = dataset)
dunn_test(x ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
hipotese(MntWines)
hipotese('MntWines')
colnames(dataset)
mnt= c("MntWines","MntFruits","MntMeatProducts","MntFishProducts","MntSweetProducts","MntGoldProds")
for( i in mnt){
p=dataset[i]
print(p)
}
for( i in mnt){
p=dataset[i]
byf.shapiro(p~cluster,data=dataset)
kruskal.test(p ~ cluster, data = dataset)
wilcox.test(p ~ cluster, data = dataset)
dunn_test(p ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
for( i in mnt){
p=dataset[i]
byf.shapiro(p~cluster,data=dataset)
kruskal.test(p ~ cluster, data = dataset)
wilcox.test(p ~ cluster, data = dataset)
dunn_test(p ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
for( i in mnt){
p=dataset[[i]]
byf.shapiro(p~cluster,data=dataset)
kruskal.test(p ~ cluster, data = dataset)
wilcox.test(p ~ cluster, data = dataset)
dunn_test(p ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
for( i in mnt){
p=i
byf.shapiro(p~cluster,data=dataset)
kruskal.test(p ~ cluster, data = dataset)
wilcox.test(p ~ cluster, data = dataset)
dunn_test(p ~ cluster, data = dataset, p.adjust.method = "bonferroni")
}
byf.shapiro(Income ~cluster, data=dataset) #Os dados não são normais
byf.shapiro(MntWines ~cluster, data=dataset) #Os dados não são normais
kruskal.test(MntWines ~ cluster, data = dataset) #Os dados não são normais
wilcox.test(MntWines ~ cluster, data = dataset) #A renda entre os dois gupos não é normal
dunn_test(MntWines ~ cluster, data = dataset, p.adjust.method = "bonferroni")
byf.shapiro(MntWines ~cluster, data=dataset) #Os dados não são normais
wilcox.test(MntWines ~ cluster, data = dataset) #A renda entre os dois gupos não é normal
dunn_test(MntWines ~ cluster, data = dataset, p.adjust.method = "bonferroni")
dataset |>
group_by(cluster) |>
get_summary_stats(MntWines, type = "median_iqr") |>
flextable() |>
set_header_labels(cluster = "Grupo", variable = "Variavél", n = "Quantidade",
median = "Mediana", iqr = "IIQ")
#--------------------------------------------------------------------------------------------
byf.shapiro(MntFruits ~cluster, data=dataset) #Os dados não são normais
wilcox.test(MntFruits~ cluster, data = dataset) #A renda entre os dois gupos não é normal
dunn_test(MntFruits ~ cluster, data = dataset, p.adjust.method = "bonferroni")
dataset |>
group_by(cluster) |>
get_summary_stats(MntFruits, type = "median_iqr") |>
flextable() |>
set_header_labels(cluster = "Grupo", variable = "Variavél", n = "Quantidade",
median = "Mediana", iqr = "IIQ")
#-----------------------------------------------------------------------------------
byf.shapiro(MntGoldProds ~cluster, data=dataset) #Os dados não são normais
wilcox.test(MntGoldProds~ cluster, data = dataset) #A renda entre os dois gupos não é normal
dataset |>
group_by(cluster) |>
get_summary_stats(MntGoldProds, type = "median_iqr") |>
flextable() |>
set_header_labels(cluster = "Grupo", variable = "Variavél", n = "Quantidade",
median = "Mediana", iqr = "IIQ")
chisq.test(dataset$Response, dataset$cluster, correct=FALSE)
#---------------------------------------------------------------------------------------------
table(dataset$Response, dataset$cluster)
#---------------------------------------------------------------------------------------------
table(dataset$Response, dataset$cluster) |> prop.table()
#---------------------------------------------------------------------------------------------
tabela= table(dataset$Response, dataset$cluster)
proportions(tabela, 1)
tbl <- xtabs(dataset$Response, dataset$cluster)
tbl <- xtabs(dataset$Response ~ dataset$cluster)
tbl
proportions(tbl, "Response")
proportions(tbl, "Cluster")
proportions(tbl, "cluster")
tbl <- xtabs(Freq ~ dataset$cluster + dataset$Response)
#---------------------------------------------------------------------------------------------
tabela= table(dataset$Response, dataset$cluster)
proportions(tabela, 1)
proportions(tabela, 1) |> flextable()
proportions(tabela, 1) |> class()
tbl <- xtabs(e ~ dataset$Respons+ dataset$cluster)
tbl <- xtabs(~ dataset$Response + dataset$cluster)
tbl
tbl <- xtabs(~ Response + cluster, data = dataset)
tbl
proportions(tbl, "cluster")
chisq.test(dataset$Response, dataset$cluster, correct=FALSE)
summary(tbl)
chisq.test(dataset$Response, dataset$cluster, correct=FALSE)
DT::datatable(data, options = list(searching = FALSE,pageLength = 5,lengthMenu = c(5, 10, 15, 20), scrollX = T))
knitr::opts_chunk$set(
warning=FALSE, message=FALSE, tidy=TRUE,	tidy.opts=list(arrow=TRUE,	indent=2),fig.width = 6, fig.align = 'center', fig.asp=0.618, out.width = '100%')
library(tidyverse)
library(here)
library(DT)
library(modelsummary)
data=read_tsv(here('data/marketing_campaign.csv'))
DT::datatable(data, options = list(searching = FALSE,pageLength = 5,lengthMenu = c(5, 10, 15, 20), scrollX = T))
data=na.omit(data)
modelsummary::datasummary_skim(data,output = "html",type = 'numeric')
modelsummary::datasummary_skim(data,output = "html",type = 'categorical')
lapply(data, class)
tbl <- xtabs(~ Response + cluster, data = dataset)
library(here)
library(tidyverse)
library(cluster)
library(factoextra)
library("ggsci")
library('RVAideMemoire')
library(flextable)
library(rstatix)
modelo = readRDS(here('objects/clara_cluster.R'))
dataset=readRDS(here('objects/final_dataset.R'))
mnt= c("MntWines","MntFruits","MntMeatProducts","MntFishProducts","MntSweetProducts","MntGoldProds")
colnames(dataset)
tbl <- xtabs(~ Response + cluster, data = dataset)
summary(tbl)
proportions(tbl, "cluster")
chisq.test(dataset$Response, dataset$cluster, correct=FALSE)
